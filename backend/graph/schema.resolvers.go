package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"main/db"
	"main/graph/model"
	"main/services"
)

// Login is the resolver for the login field.
func (r *authOpsResolver) Login(ctx context.Context, obj *model.AuthOps, email string, password string) (interface{}, error) {
	return services.UserLogin(ctx, email, password)
}

// Register is the resolver for the register field.
func (r *authOpsResolver) Register(ctx context.Context, obj *model.AuthOps, input model.NewUser) (interface{}, error) {
	return services.UserRegister(ctx, input)
}

// SpotifyLogin is the resolver for the spotifyLogin field.
func (r *authOpsResolver) SpotifyLogin(ctx context.Context, obj *model.AuthOps, code string) (interface{}, error) {
	return services.SpotifyUserLogin(ctx, code)
}

// Auth is the resolver for the auth field.
func (r *mutationResolver) Auth(ctx context.Context) (*model.AuthOps, error) {
	return &model.AuthOps{}, nil
}

// TrendingReleases is the resolver for the trendingReleases field.
func (r *queryResolver) TrendingReleases(ctx context.Context, input model.ReleasesInput) (*model.ReleasesList, error) {
	return db.GetTrendingReleases(input.Type, input.Direction, input.Reference, input.Period), nil
}

// Release is the resolver for the release field.
func (r *queryResolver) Release(ctx context.Context, id int) (*model.Release, error) {
	return db.GetRelease(id), nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	return db.UserGetByID(ctx, id)
}

// Recommendations is the resolver for the recommendations field.
func (r *queryResolver) Recommendations(ctx context.Context, input model.RecommendationsInput) ([]*model.Release, error) {
	return services.GetRecommendations(ctx, input), nil
}

// SearchArtists is the resolver for the searchArtists field.
func (r *queryResolver) SearchArtists(ctx context.Context, query string) ([]*model.Artist, error) {
	return services.SearchArtists(ctx, query), nil
}

// Artist is the resolver for the artist field.
func (r *queryResolver) Artist(ctx context.Context, spotifyID string) (*model.Artist, error) {
	return services.GetArtist(spotifyID), nil
}

// AuthOps returns AuthOpsResolver implementation.
func (r *Resolver) AuthOps() AuthOpsResolver { return &authOpsResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type authOpsResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
